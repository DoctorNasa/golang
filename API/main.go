package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
)

// Generated by https://quicktype.io

type Ping struct {
	Message string `json:"message"`
}

type apiHandler struct{}

func (apiHandler) ServeHTTP(w http.ResponseWriter, r *http.Response) {
	var ping Ping 
	if err := json.NewDecoder(r.Body).Decode(&ping);
	err != nil {
		w.WriteHeader(http.StatusBadRequest)
		fmt.Fprint(w, "welcome to the homepage")
		return
	}

	log.Print(ping.Message)

	if err := json.NewEncoder(w).Encode(map[string]string{
		"massage": "pong",
		
	}); err != nil {
		w.WriteHeader(http.StatusInternalServerError)
		return
	}
}

func main() {
	
	h1 := func(w http.ResponseWriter, _ *http.Request) {
		io.WriteString(w, "Hello from a HandleFunc #1!\n")
	}
	h2 := func(w http.ResponseWriter, _ *http.Request) {
		io.WriteString(w, "Hello from a HandleFunc #2!\n")
	}
	h3 := func ()  {
		
	}

	http.HandleFunc("/", h1)
	http.HandleFunc("/endpoint", h2)
	http.Handler("/api", (apiHandler))

	

	log.Fatal(http.ListenAndServe(":8080", nil))
}
